#!/usr/bin/env python3

import sys
import os
import json
import subprocess

param_dict = {}

explanations = {"help": "mvm help <argument>: explain a given argument, list all arguments if none given",
                "install": "mvm install: install this script on your pc, requires root privileges",
                "uninstall": "mvm uninstall: remove this script from your pc, requires root privileges",
                "parameter": "mvm parameter <action> <parameter>: perform given action (get/set) on given project\n"
                             "                                    parameter in mesproj.json. When setting versions,\n"
                             "                                    put 'latest' or specify an older commit by its SHA.",
                "check": "mvm check: verify that the build system and its dependencies exits and are up to date,\n"
                         "           according to the parameters specified in mesproj.json",
                "update": "mvm update: update the build system and its dependencies to their version specified in\n"
                          "            mesproj.json. Use -f or --force to update even if the correct versions are\n"
                          "            installed.",
                "simulate": "mvm simulate: simulate project using vmes.",
                "assets": "mvm assets: process assets.",
                "flash": "mvm flash: flash project to mes cpu",
                "upgrade": "mvm upgrade: install newest version of mvm."}


def _checkroot(msg):
    if os.getuid() != 0:
        print(msg)
        return False
    return True


def _checkproject():
    if not os.path.exists('mesproj.json'):
        print("'mesproj.json' not found. Verify you're inside the correct directory.")
        exit()


def _checkmvm():
    if os.path.exists("~/.local/share/mvm"):
        version = subprocess.run("cd ~/.local/share/mvm; git rev-parse HEAD", capture_output=True, shell=True).stdout.decode().rstrip()
        version_remote = subprocess.run("cd ~/.local/share/mvm; git rev-parse origin/main", capture_output=True, shell=True).stdout.decode().rstrip()
        if version == version_remote:
            return True
    return False


def _update_dict():
    _checkproject()
    global param_dict
    with open("mesproj.json", "r") as file:
        param_dict = json.load(file)
    if not 'mes_version' in param_dict or not 'vmes_version' in param_dict or not 'mbs_version' in param_dict:
        print("Error: mesproj.json is incomplete.")
        exit()


def _getparam(param):
    try:
        return param_dict[param]
    except KeyError:
        print(f"Error: Key '{param}' not found in mesproj.json")
        exit()


def _setparam(param, value):
    param_dict[param] = value
    with open("replayScript.json", "w") as jsonFile:
        json.dump(param_dict, jsonFile)


def upgrade(args):
    if not _checkroot("Error: Root privileges required to copy script into /usr/local/bin. Kindly run with sudo."): return
    if _checkmvm():
        print("Nothing to upgrade, mvm is up to date.")
        return
    os.system("rm -rf ~/.local/share/mvm")
    os.system(f"cd ~/.local/share; git clone https://github.com/menga-team/mes-version-manager; mv mes-version-manager mvm; cp mvm/mvm /usr/local/bin/mvm")


def uninstall(args):
    if not _checkroot("Error: Root privileges required to remove script from /usr/local/bin. Kindly run with sudo."): return
    os.system("rm /usr/local/bin/mvm")


def parameter(args):
    if len(args) <= 2:
        print("Error: Not enough arguments. Usage: mvm parameter <action> <parameter>")
        return
    _checkproject()
    _update_dict()
    if args[1] == "get":
        print(_getparam(args[2]))
    elif args[1] == "set":
        if len(args) <= 3:
            print(f"Error: Not enough arguments. Please specify the value to be assigned to {args[2]}")
            return
        _setparam(args[2], args[3])
    else:
        print(f"Error: Unknown action: '{args[1]}'. Usage: mvm parameter <action> <parameter>")


def check(args):
    _update_dict()
    _checkproject()
    for i in ["mbs", "mes", "vmes"]:
        target_version = _getparam(f"{i}_version")
        if os.path.exists(f".{i}"):
            version = subprocess.run(f"cd .{i}; git rev-parse HEAD", capture_output=True, shell=True).stdout.decode().rstrip()
            version_remote = subprocess.run(f"cd .{i}; git rev-parse origin/main", capture_output=True, shell=True).stdout.decode().rstrip()
            if version == version_remote and not version == target_version:  # if target version is latest SHA, dont change version to 'latest'
                version = "latest"
            print(f"{i}: " + ("OK ✓" if version == target_version else "BAD ✗") + '\033[90m' f" (installed: {version[:7]}, required: {target_version[:7]})" '\033[0m')
        else:
            print(f"{i}: BAD ✗" '\033[90m' f" (installed: none, required: {target_version[:7]})" '\033[0m')


def update(args):
    _update_dict()
    _checkproject()
    updated = False
    repo_names = {"mbs": "mes-build-system", "mes": "MES", "vmes": "Virtual-MES"}
    for i in ["mbs", "mes", "vmes"]:
        target_version = _getparam(f"{i}_version")
        if os.path.exists(f".{i}"):
            version = subprocess.run(f"cd .{i}; git rev-parse HEAD", capture_output=True, shell=True).stdout.decode().rstrip()
            version_remote = subprocess.run(f"cd .{i}; git rev-parse origin/main", capture_output=True, shell=True).stdout.decode().rstrip()
            if version == version_remote and not version == target_version:  # if target version is latest SHA, dont change version to 'latest'
                version = "latest"
            if (version != target_version) or (len(args) > 1 and (args[1] == "--force" or args[1] == "-f")):
                updated = True
                os.system(f"rm -rf .{i}")
                os.system(f"git clone https://github.com/menga-team/{repo_names[i]}")
                os.system(f"mv {repo_names[i]} .{i}")
                if target_version != "latest":
                    os.system(f"cd .{i}; git reset --hard {target_version}")
        else:
            updated = True
            os.system(f"git clone https://github.com/menga-team/{repo_names[i]}")
            os.system(f"mv {repo_names[i]} .{i}")
            if target_version != "latest":
                os.system(f"cd .{i}; git reset --hard {target_version}")
    if not updated:
        print("Nothing to update, you're all set!")


def simulate(args):
    os.system("cd .mbs; make simulate")


def assets(args):
    os.system("cd .mbs; make assets")


def flash(args):
    try:
        import elftools
    except ModuleNotFoundError:
        print("Error: elftools is not installed. Run 'pip install pyelftools' to install.")
        exit()
    try:
        import jinja2
    except ModuleNotFoundError:
        print("Error: jinja2 is not installed. Run 'pip install Jinja2' to install.")
        exit()
    os.system("cd .mbs; make flash-setup; make flash")


def help(args):
    if len(args) <= 1:
        print("Here's a list of possible arguments:\n"
              "    help - show this list\n"
              "    install - install itself\n"
              "    uninstall - remove itself\n"
              "    parameter - get/set project parameters\n"
              "    check - verify project is up to date\n"
              "    update - update project\n"
              "    simulate - idk\n"
              "    assets - idk\n"
              "    flash - idk\n"
              "Try 'mvm help <argument>' to get a more detailed explanation.")
    else:
        try:
            print(explanations[args[1]])
        except KeyError:
            print(f"Error: no argument named '{args[1]}'")


arguments = sys.argv[1:]
if len(arguments) == 0:
    print("Error: Not enough arguments. Run 'mvm help' for a list of arguments.")
    exit()
try:
    locals().get(arguments[0])(arguments)
except TypeError:
    print(f'Error: No argument named "{arguments[0]}". ' + "Run 'mvm help' for a list of arguments.")
if not _checkmvm():
    print("Warning: Looks like mvm is not up to date! Please install its newest version using 'mvm upgrade'")
